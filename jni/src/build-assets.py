#!/usr/bin/env python2

from glob import glob
from PIL import Image
from os import path
import json

data = ''
sprites = ''
objects = ''

includes = set(['objects/Sprite.hpp', 'Assets.hpp'])
spriteFiles = set()


def px2m(px, dimPx, dimM):
    return (float(px) / dimPx) * dimM


def name(file):
    return file.replace('.', '').replace('/', '')

objects += '    Type info;'
for assetFile in glob('assets/*.json') + glob('assets/*/*.json'):
    with open(assetFile) as f:
        d = json.load(f)
        spriteFile = path.join(path.dirname(assetFile), d['sprite'])
        spriteFiles.add(spriteFile)

        includes.add('objects/{class_}.hpp'.format(class_=d['class']))

        img = Image.open(spriteFile)
        w, h = img.size

        objects += '\n    // {class_}::{type}\n'.format(class_=d['class'], type=d['type'])

        if d['shape']:
            shapeVar = '{className}{id}Shape'.format(className=d['class'], id=d['type'])
            fixtureVar = '{className}{id}Def'.format(className=d['class'], id=d['type'])

            shape = d['shape']['type']

            if shape == 'b2CircleShape':
                objects += '    {name}.m_radius = {r};\n'.format(name=shapeVar, r=px2m(d['shape']['pixels'], w, d['meters'][0]))

            elif shape == 'b2PolygonShape':
                data += 'b2Vec2 {name}Polygon[] = {{'.format(name=shapeVar)
                for p in d['shape']['pixels']:
                    data += 'b2Vec2({x}, {y}), '.format(x=px2m(p[0], w, d['meters'][0]), y=px2m(p[1], h, d['meters'][1]))
                data += '};\n'

                objects += '    {name}.Set({name}Polygon, {size});\n'.format(name=shapeVar, size=len(d['shape']['pixels']))

            data += '{type} {name};\n'.format(type=shape, name=shapeVar)
            data += 'b2FixtureDef {name};\n'.format(name=fixtureVar)

            objects += '    {name}.shape = &{shapeVar};\n'.format(name=fixtureVar, shapeVar=shapeVar)
            objects += '    {name}.density = {val};\n'.format(name=fixtureVar, val=d['physics']['density'])
            objects += '    {name}.friction = {val};\n'.format(name=fixtureVar, val=d['physics']['friction'])
            objects += '    {name}.restitution = {val};\n'.format(name=fixtureVar, val=d['physics']['restitution'])
            objects += '    info.def = &{fixture};\n'.format(fixture=fixtureVar)
        else:
            objects += '    info.def = NULL;\n'

        objects += '    info.sprite = {sprite};\n'.format(sprite=name(spriteFile))
        objects += '    info.meters = b2Vec2({x}, {y});\n'.format(x=d['meters'][0], y=d['meters'][1])
        objects += '    types_[\"{class_}\"][\"{type}\"] = info;\n'.format(class_=d['class'], type=d['type'])

for spriteFile in spriteFiles:
    img = Image.open(spriteFile)
    pix = img.load()

    data += 'unsigned char {name}Data[] = {{'.format(name=name(spriteFile))

    for y in range(0, img.size[1]):
        for x in range(0, img.size[0]):
            p = pix[x, y]
            data += '0x%X, 0x%X, 0x%X, 0x%X, ' % (p[0], p[1], p[2], p[3])
            pass

    data += '};\n'

    x, y = img.size
    sprites += '    // {file}\n'.format(file=spriteFile)
    sprites += '    Sprite* {name} = new Sprite({x}, {y}, {name}Data);\n'.format(name=name(spriteFile), x=x, y=y)


code = open('Assets.cpp', 'w')
code.write('/*\n * GENERATED BY build-assets.py\n */\n\n')

for name in includes:
    code.write('#include \"{name}\"\n'.format(name=name))

code.write(data)
code.write('''

Assets& Assets::instance()
{
    static Assets instance_;
    return instance_;
}

void Assets::init()
{
''')
code.write(sprites)
code.write(objects)
code.write('}\n')
