#!/usr/bin/env python2

from glob import glob
from PIL import Image
from os import path
import json

data = ""
sprites = ""
shapes = ""
objects = ""
includes = ""

spriteFiles = set()
classNames = set()

for assetFile in glob("assets/*.json") + glob("assets/*/*.json"):
    with open(assetFile) as f:
        d = json.load(f)
        spriteFile = path.join(path.dirname(assetFile), d["sprite"])
        spriteFiles.add(spriteFile)
        classNames.add(d["class"])

        img = Image.open(spriteFile)
        w, h = img.size

        shape = d["shape"]["type"]
        shapeDataName = "{className}{id}Shape".format(className=d["class"], id=d["id"])
        shape_data = "{type} {name};\n".format(type=shape, name=shapeDataName)

        shape_data_init = ""

        if shape == "b2CircleShape":
            r = (float(d["shape"]["r"]) / w) * d["size"][0]
            shape_data_init += "{name}.m_radius = {r};".format(name=shapeDataName, r=r)
        elif shape == "b2PolygonShape":
            shape_data += "b2Vec2 {name}Polygon[] = {{".format(name=shapeDataName)
            for p in d["shape"]["points"]:
                x = (float(p[0]) / w) * d["size"][0]
                y = (float(p[1]) / h) * d["size"][1]
                shape_data += "b2Vec2({x}, {y}), ".format(x=x, y=y)
            shape_data += "};\n"

            shape_data_init += "{name}.Set({name}Polygon, {size});".format(name=shapeDataName, size=len(d["shape"]["points"]))

        shapes += shape_data

        objects += """
    // {className}
    {shape_data_init}
    {className}::addType("{id}", &{shapeDataName}, {spriteName}Ptr, b2Vec2({x}, {y}));
""".format(className=d["class"], shape_data_init=shape_data_init, id=d["id"], shape=shape, spriteName=spriteFile.replace(".", "").replace("/", ""), shapeDataName=shapeDataName, x=0, y=0)

for name in classNames:
    includes += "#include \"objects/{name}.hpp\"\n".format(name=name)

for spriteFile in spriteFiles:
    img = Image.open(spriteFile)
    pix = img.load()
    spriteId = spriteFile.replace(".", "").replace("/", "")

    hex = ""
    for y in range(0, img.size[1]):
        for x in range(0, img.size[0]):
            p = pix[x, y]
            hex += "0x%X, 0x%X, 0x%X, 0x%X, " % (p[0], p[1], p[2], p[3])
            pass

    data += "unsigned char {id}Data[] = {{{hex}}};\n".format(id=spriteId, hex=hex)

    x, y = img.size
    sprites += """
    // {spriteFile}
    Sprite* {id}Ptr = new Sprite();
    {id}Ptr->initialize({x}, {y}, {id}Data);
""".format(spriteFile=spriteFile, id=spriteId, x=x, y=y)


code = open("Assets.cpp", "w")
code.write("""/* GENERATED BY build-assets.py */
#include "objects/Sprite.hpp"
#include "Assets.hpp"
""")
code.write(includes)
code.write(data)
code.write(shapes)
code.write("""

Assets& Assets::instance()
{
    static Assets instance_;
    return instance_;
}

void Assets::init()
{
""")
code.write(sprites)
code.write(objects)
code.write("}\n")
