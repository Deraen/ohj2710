#!/usr/bin/env python2

from glob import glob
from PIL import Image
from os import path
import json

alldata = ""
loadfunctions = ""
identifiers = ""
for assetFile in glob('assets/*.json') + glob('assets/*/*.json'):
    with open(assetFile) as f:
        d = json.load(f)
        spriteFile = path.join(path.dirname(assetFile), d['sprite'])

        img = Image.open(spriteFile)
        pix = img.load()

        data = ""
        for y in range(0, img.size[1]):
            for x in range(0, img.size[0]):
                p = pix[x, y]
                data += '0x%X, 0x%X, 0x%X, 0x%X, ' % (p[0], p[1], p[2], p[3])
                pass

        x, y = img.size

        loadfunctions += """
    // {filename}
    sprite = new Sprite();
    sprite->initialize({x}, {y}, {id}_data);
    sprites_["{id}"] = sprite;
""".format(id=d['id'], filename=assetFile, bytes=x * y * 4, x=x, y=y)

        alldata += 'unsigned char {id}_data[] = {{{data}}};\n'.format(id=d['id'], data=data)

code = open('Assets.cpp', 'w')
code.write('''/* GENERATED BY build-assets.py */
#include "objects/Sprite.hpp"
#include "Assets.hpp"

''')
code.write(alldata)
code.write('''
Assets& Assets::instance()
{
    static Assets instance_;
    return instance_;
}

void Assets::init()
{
    Sprite* sprite = NULL;
''')
code.write(loadfunctions)
code.write('''}

Sprite* Assets::getSprite(const std::string& identifier)
{
    auto find = sprites_.find(identifier);
    if (find != sprites_.end()) {
        return find->second;
    }
    return 0;
}
''')
