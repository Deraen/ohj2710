SET(OpenGLES_SEARCH_PATHS
	~/Library/Frameworks
	/Library/Frameworks
	/usr/local
	/usr
	/sw # Fink
	/opt/local # DarwinPorts
	/opt/csw # Blastwave
	/opt
)

FIND_PATH(OpenGLES_INCLUDE_DIR egl.h
	HINTS
	$ENV{OpenGLESDIR}
	PATH_SUFFIXES include/GLES include
	PATHS ${OpenGLES_SEARCH_PATHS}
)

FIND_LIBRARY(OpenGLES_LIBRARY_TEMP
	NAMES GLESv1_CM
	HINTS
	$ENV{OpenGLESDIR}
	PATH_SUFFIXES lib64 lib lib/x86_64-linux-gnu/mesa-egl
	PATHS ${OpenGLES_SEARCH_PATHS}
)

IF(NOT OpenGLES_BUILDING_LIBRARY)
	IF(NOT ${OpenGLES_INCLUDE_DIR} MATCHES ".framework")
		FIND_LIBRARY(OpenGLESMAIN_LIBRARY
			NAMES GLESv1_CM
			HINTS
			$ENV{OpenGLESDIR}
			PATH_SUFFIXES lib64 lib lib/x86_64-linux-gnu/mesa-egl
			PATHS ${OpenGLES_SEARCH_PATHS}
		)
	ENDIF(NOT ${OpenGLES_INCLUDE_DIR} MATCHES ".framework")
ENDIF(NOT OpenGLES_BUILDING_LIBRARY)

IF(MINGW)
	SET(MINGW32_LIBRARY mingw32 CACHE STRING "mwindows for MinGW")
ENDIF(MINGW)

IF(OpenGLES_LIBRARY_TEMP)
	# For OpenGLESmain
	IF(NOT OpenGLES_BUILDING_LIBRARY)
		IF(OpenGLESMAIN_LIBRARY)
			SET(OpenGLES_LIBRARY_TEMP ${OpenGLESMAIN_LIBRARY} ${OpenGLES_LIBRARY_TEMP})
		ENDIF(OpenGLESMAIN_LIBRARY)
	ENDIF(NOT OpenGLES_BUILDING_LIBRARY)

	IF(APPLE)
		SET(OpenGLES_LIBRARY_TEMP ${OpenGLES_LIBRARY_TEMP} "-framework Cocoa")
	ENDIF(APPLE)

	IF(NOT APPLE)
		SET(OpenGLES_LIBRARY_TEMP ${OpenGLES_LIBRARY_TEMP})
	ENDIF(NOT APPLE)

	# For MinGW library
	IF(MINGW)
		SET(OpenGLES_LIBRARY_TEMP ${MINGW32_LIBRARY} ${OpenGLES_LIBRARY_TEMP})
	ENDIF(MINGW)

	# Set the final string here so the GUI reflects the final state.
	SET(OpenGLES_LIBRARY ${OpenGLES_LIBRARY_TEMP} CACHE STRING "Where the OpenGLES Library can be found")
	# Set the temp variable to INTERNAL so it is not seen in the CMake GUI
	SET(OpenGLES_LIBRARY_TEMP "${OpenGLES_LIBRARY_TEMP}" CACHE INTERNAL "")
ENDIF(OpenGLES_LIBRARY_TEMP)

INCLUDE(FindPackageHandleStandardArgs)

FIND_PACKAGE_HANDLE_STANDARD_ARGS(OpenGLES REQUIRED_VARS OpenGLES_LIBRARY OpenGLES_INCLUDE_DIR)